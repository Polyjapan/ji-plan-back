openapi: 3.0.0
info:
  title: ji-plan-back
  version: '1.1'
  description: Serves a tree-like structure of things you could see on a plan.
  contact:
    name: Arnaud Gaudard
    email: arnaud.gaudard@japan-impact.ch
servers:
  - url: 'https://plan.japan-impact.ch/plan'
    description: Prod
  - url: 'http://127.0.0.1:8000/plan'
    description: Local dev
paths:
  '/thing/{client_id}':
    get:
      summary: Get a thing
      tags:
        - endpoints
      operationId: get-at
      description: Return the thing identified by this client id
      requestBody:
        description: ''
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/return'
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: client id of the thing you wish to interact with
    put:
      summary: Set a thing completely
      operationId: put-at-pk
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/return'
      description: |-
        Reset the thing identified by this client id, with what is provided in the body
        Every field must be present.
        Return this thing as if you called GET on it.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/thing-as-submit'
      tags:
        - endpoints
    patch:
      summary: Set parts of a thing
      operationId: patch-at-pk
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/return'
      description: |-
        Change some fields of the thing identified by this client id.
        Only the fields that are present, will be modified with the given values.
        Return this thing as if you called GET on it.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/thing-as-submit'
        description: ''
      tags:
        - endpoints
    delete:
      summary: Delete a thing
      operationId: delete-at-pk
      responses:
        '200':
          description: OK
      description: |-
        Delete the thing identified by this client id.
        Return nothing.
      tags:
        - endpoints
  '/thing/{client_id}/create':
    post:
      summary: Create a thing
      operationId: post-create
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/thing-as-return'
      description: |-
        Create a new thing.
        Every field must be present.
        Returns this thing as if you called GET on it.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/thing-as-submit'
            examples:
              New plan:
                value:
                  where:
                    parent: null
                    position: null
                    layer: null
                  what:
                    tag: plan
                    attrs:
                      name: CE 2021
      tags:
        - endpoints
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: UUID for the new thing. Client-defined.
  '/thing/{client_id}/at-and-inside':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: client id of the thing you wish to interact with
    get:
      summary: Get a thing and its children recursively
      tags:
        - endpoints
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/thing-as-return'
      operationId: get-at-and-inside-pk
      description: |-
        Return a list containing :
        * The thing identified by this client id
        * Every thing whose parent is identified by this client id
        * And their children, recursively.
      requestBody: {}
  '/layer/{client_id}':
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: client id of the layer you wish to interact with
    get:
      summary: Get a Layer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/return'
      operationId: get-layer-pk
      description: "Return a layer's name and a list of contained things' client id's."
      parameters: []
      tags:
        - endpoints
    put:
      summary: ''
      operationId: put-layer-pk
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/return'
              examples: {}
      description: Rename a layer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/layer-as-submit'
      tags:
        - endpoints
  '/layer/{client_id}/create':
    post:
      summary: Create a layer
      operationId: post-layer-create
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/return'
      description: Create a new layer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/layer-as-submit'
            examples:
              New layer:
                value:
                  name: pouetpouet
      tags:
        - endpoints
    parameters:
      - schema:
          type: string
        name: client_id
        in: path
        required: true
        description: UUID for the new thing. Client-defined.
components:
  schemas:
    thing-as-submit:
      title: Thing-as-submitted Schema
      type: object
      description: 'When you submit a thing with a PUT, PATCH or POST call, it will have to follow this format.'
      x-tags:
        - schemas
      properties:
        where:
          type: object
          additionalProperties: false
          properties:
            parent:
              type:
                - string
                - 'null'
              description: 'pk of direct parent in the tree. It must be the pk of an existing thing. If null, this thing will be detached.'
            position:
              type:
                - object
                - 'null'
              description: "X-Y position of this thing relative to its parent. \nIf null, this thing wil be implicitly positioned e.g. a chair inside a booth needs to be there, but we don't care about its exact position."
              properties:
                x:
                  type: number
                'y':
                  type: number
            layer:
              description: |-
                Pk of layer this thing will be displayed with.
                Null means this thing is always displayed.
              type:
                - string
                - 'null'
        what:
          type: object
          additionalProperties: false
          properties:
            tag:
              type: string
              enum:
                - zone
                - object
                - plan
              description: |-
                What type of thing this is?
                A plan contains zones & objects (CE, CM..).
                A zone contains zones & objects (section, booth space...).
                An object contains nothing (chair, table...).
            attrs:
              type: object
              description: "May contain any key. This is left to the frontend. \nAny null value means \"please remove this key\". Please use an empty string if you want to store a nothing."
    return:
      title: Return Schema
      type: object
      description: |
        Every call that yields a result (GET,PUT,PATCH,POST) will return this on a 200 OK response.
      x-tags:
        - schemas
      properties:
        messages:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              tags:
                type: string
                enum:
                  - debug
                  - info
                  - success
                  - warning
                  - error
        return:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/thing-as-return'
              - $ref: '#/components/schemas/layer-as-return'
    thing-as-return:
      title: Thing-as-returned Schema
      description: Every thing the server returns will follow this format.
      type: object
      x-examples: {}
      x-tags:
        - schemas
      properties:
        ancestors:
          type: array
          description: 'Gives pk of every ancestor of this thing in the tree, in a bottom-up order, not including this thing.'
          items:
            type: string
        client_id:
          type: string
          description: Primary key. Unique across all things. Identifies this thing.
        where:
          type: object
          additionalProperties: false
          properties:
            parent:
              type:
                - string
                - 'null'
              description: 'pk of direct parent in the tree. If null, this thing is detached.'
            position:
              type:
                - string
                - 'null'
              example: 2;4 or 2.0;4.5
              pattern: "\\d+(\\.?\\d+)?;\\d+(\\.?\\d+)?"
              description: 'X-Y position of this thing relative to its parent. If null, this thing is implicitly positioned (e.g. because it does not matter so much).'
            layer:
              type:
                - string
                - 'null'
              description: |-
                Which layer this thing will be displayed with.
                Null means this thing is always displayed.
        what:
          type: object
          additionalProperties: false
          properties:
            tag:
              type: string
              enum:
                - zone
                - object
              description: What type of thing this is? zone or object.
            attrs:
              type: object
              description: 'May contain any key. This is left to the frontend. Notice that no value can be null, only empty string will do.'
    layer-as-return:
      title: Layer-as-returned Schema
      type: object
      description: Every layer the server returns has this format
      x-tags:
        - schemas
      properties:
        name:
          type: string
        client_id:
          type: string
        things:
          type: array
          description: "Array of pk's of contained things"
          items:
            type: integer
    layer-as-submit:
      title: Layer-as-submitted Schema
      type: object
      properties:
        name:
          type: string
      description: Every submission of a layer (for creation or edition) has to follow this format
      x-tags:
        - schemas
  securitySchemes: {}
